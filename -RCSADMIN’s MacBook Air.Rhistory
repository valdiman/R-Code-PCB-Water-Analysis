# Fill USA land with a light gray color
geom_polygon(data = usa_map, aes(x = long, y = lat, group = group),
fill = "lightgray", color = NA) +
# Add state lines
geom_path(data = usa_map, aes(x = long, y = lat, group = group),
color = "black", size = 0.5) +  # Set state lines color and size
# Plot log10-transformed data points, with transparency added using alpha
geom_point(data = usa_data, aes(x = Longitude, y = Latitude, color = tPCB_log10),
size = 2, alpha = 0.7) +  # Set alpha for transparency
scale_color_viridis_c(option = "D", name = "log10(tPCB)") +  # Use the viridis color scale
coord_map(xlim = c(long_min, long_max), ylim = c(lat_min, lat_max)) +  # Limit plot to specific latitude/longitude bounds
labs(title = "log10(tPCB) Data in the USA",
x = "Longitude", y = "Latitude") +
theme_minimal() +  # Minimal theme with clean background
theme(panel.background = element_rect(fill = "white"),  # Set the panel background to white
plot.background = element_rect(fill = "white"))  # Set the plot background to white
# Plot the ggplot object for the USA
print(gg_map_usa)
# Convert the ggplot into a 3D plot using rayshader
plot_gg(gg_map_usa, width = 5, height = 4, scale = 300, multicore = TRUE, windowsize = c(1000, 800))
# Adjust the camera settings
render_camera(fov = 70, zoom = 0.5, theta = 130, phi = 35)
# Render the snapshot
Sys.sleep(0.2)
render_snapshot(clear = TRUE)
# Get map data for the USA and states
usa_map <- map_data("usa")
states_map <- map_data("state")  # Get state boundaries
# Create the ggplot object for the entire USA with state lines
gg_map_usa <- ggplot() +
# Fill USA land with a light gray color
geom_polygon(data = usa_map, aes(x = long, y = lat, group = group),
fill = "lightgray", color = NA) +
# Add state lines using the state boundaries
geom_path(data = states_map, aes(x = long, y = lat, group = group),
color = "black", size = 0.5) +  # Draw state lines
# Plot log10-transformed data points, with transparency added using alpha
geom_point(data = usa_data, aes(x = Longitude, y = Latitude, color = tPCB_log10),
size = 2, alpha = 0.7) +  # Set alpha for transparency
scale_color_viridis_c(option = "D", name = "log10(tPCB)") +  # Use the viridis color scale
coord_map(xlim = c(long_min, long_max), ylim = c(lat_min, lat_max)) +  # Limit plot to specific latitude/longitude bounds
labs(title = "log10(tPCB) Data in the USA",
x = "Longitude", y = "Latitude") +
theme_minimal() +  # Minimal theme with clean background
theme(panel.background = element_rect(fill = "white"),  # Set the panel background to white
plot.background = element_rect(fill = "white"))  # Set the plot background to white
# Plot the ggplot object for the USA
print(gg_map_usa)
# Create the ggplot object for the entire USA with state lines
gg_map_usa <- ggplot() +
# Fill USA land with a light gray color
geom_polygon(data = usa_map, aes(x = long, y = lat, group = group),
fill = "lightgray", color = NA) +
# Add state lines using the state boundaries
geom_path(data = states_map, aes(x = long, y = lat, group = group),
color = "black", size = 0.3) +  # Draw state lines
# Plot log10-transformed data points, with transparency added using alpha
geom_point(data = usa_data, aes(x = Longitude, y = Latitude, color = tPCB_log10),
size = 2, alpha = 0.7) +  # Set alpha for transparency
scale_color_viridis_c(option = "D", name = "log10(tPCB)") +  # Use the viridis color scale
coord_map(xlim = c(long_min, long_max), ylim = c(lat_min, lat_max)) +  # Limit plot to specific latitude/longitude bounds
labs(title = "log10(tPCB) Data in the USA",
x = "Longitude", y = "Latitude") +
theme_minimal() +  # Minimal theme with clean background
theme(panel.background = element_rect(fill = "white"),  # Set the panel background to white
plot.background = element_rect(fill = "white"))  # Set the plot background to white
# Plot the ggplot object for the USA
print(gg_map_usa)
# Create the ggplot object for the entire USA with state lines
gg_map_usa <- ggplot() +
# Fill USA land with a light gray color
geom_polygon(data = usa_map, aes(x = long, y = lat, group = group),
fill = "lightgray", color = NA) +
# Add state lines using the state boundaries
geom_path(data = states_map, aes(x = long, y = lat, group = group),
color = "black", size = 0.1) +  # Draw state lines
# Plot log10-transformed data points, with transparency added using alpha
geom_point(data = usa_data, aes(x = Longitude, y = Latitude, color = tPCB_log10),
size = 2, alpha = 0.7) +  # Set alpha for transparency
scale_color_viridis_c(option = "D", name = "log10(tPCB)") +  # Use the viridis color scale
coord_map(xlim = c(long_min, long_max), ylim = c(lat_min, lat_max)) +  # Limit plot to specific latitude/longitude bounds
labs(title = "log10(tPCB) Data in the USA",
x = "Longitude", y = "Latitude") +
theme_minimal() +  # Minimal theme with clean background
theme(panel.background = element_rect(fill = "white"),  # Set the panel background to white
plot.background = element_rect(fill = "white"))  # Set the plot background to white
# Plot the ggplot object for the USA
print(gg_map_usa)
# Convert the ggplot into a 3D plot using rayshader
plot_gg(gg_map_usa, width = 5, height = 4, scale = 300, multicore = TRUE, windowsize = c(1000, 800))
# Adjust the camera settings
render_camera(fov = 70, zoom = 0.5, theta = 130, phi = 35)
# Render the snapshot
Sys.sleep(0.2)
render_snapshot(clear = TRUE)
library(gridExtra)  # To arrange plots
# Create the ggplot object for the legend
legend_plot <- ggplot() +
scale_color_viridis_c(option = "D", name = "log10(tPCB)") +
theme_void() +  # Remove axes and background
guides(color = guide_legend(override.aes = list(size = 4)))  # Adjust legend point size
# Render the 3D plot
plot_gg(gg_map_usa, width = 5, height = 4, scale = 300, multicore = TRUE, windowsize = c(1000, 800))
# Adjust the camera settings
render_camera(fov = 70, zoom = 0.5, theta = 130, phi = 35)
# Render the snapshot
Sys.sleep(0.2)
render_snapshot(clear = TRUE)
# Combine the 3D plot and the 2D legend
grid.arrange(legend_plot, top = "log10(tPCB) Data in the USA", ncol = 2)
library(rayshader)
# Create the ggplot object for the entire USA with state lines and no legend
gg_map_usa <- ggplot() +
# Fill USA land with a light gray color
geom_polygon(data = usa_map, aes(x = long, y = lat, group = group),
fill = "lightgray", color = NA) +
# Add state lines using the state boundaries
geom_path(data = states_map, aes(x = long, y = lat, group = group),
color = "black", size = 0.1) +  # Draw state lines
# Plot log10-transformed data points, with transparency added using alpha
geom_point(data = usa_data, aes(x = Longitude, y = Latitude, color = tPCB_log10),
size = 2, alpha = 0.7, show.legend = FALSE) +  # Remove legend
scale_color_viridis_c(option = "D", name = "log10(tPCB)") +  # Use the viridis color scale
coord_map(xlim = c(long_min, long_max), ylim = c(lat_min, lat_max)) +  # Limit plot to specific latitude/longitude bounds
labs(title = "log10(tPCB) Data in the USA",
x = "Longitude", y = "Latitude") +
theme_minimal() +  # Minimal theme with clean background
theme(panel.background = element_rect(fill = "white"),  # Set the panel background to white
plot.background = element_rect(fill = "white"))  # Set the plot background to white
# Plot the ggplot object for the USA
print(gg_map_usa)
# Convert the ggplot into a 3D plot using rayshader without the legend
plot_gg(gg_map_usa, width = 5, height = 4, scale = 300, multicore = TRUE, windowsize = c(1000, 800))
# Adjust the camera settings
render_camera(fov = 70, zoom = 0.5, theta = 130, phi = 35)
# Render the snapshot without the legend
Sys.sleep(0.2)
render_snapshot(clear = TRUE)  # No keep_user_par argument
# Create the ggplot object for the entire USA with state lines and no legend
gg_map_usa <- ggplot() +
# Fill USA land with a light gray color
geom_polygon(data = usa_map, aes(x = long, y = lat, group = group),
fill = "lightgray", color = NA) +
# Add state lines using the state boundaries
geom_path(data = states_map, aes(x = long, y = lat, group = group),
color = "black", size = 0.1) +  # Draw state lines
# Plot log10-transformed data points, with transparency added using alpha
geom_point(data = usa_data, aes(x = Longitude, y = Latitude, color = tPCB_log10),
size = 2, alpha = 0.7, show.legend = FALSE) +  # Remove legend
scale_color_viridis_c(option = "D", name = "log10(tPCB)", direction = -1) +  # Reverse color scale
coord_map(xlim = c(long_min, long_max), ylim = c(lat_min, lat_max)) +  # Limit plot to specific latitude/longitude bounds
labs(title = "log10(tPCB) Data in the USA",
x = "Longitude", y = "Latitude") +
theme_minimal() +  # Minimal theme with clean background
theme(panel.background = element_rect(fill = "white"),  # Set the panel background to white
plot.background = element_rect(fill = "white"))
# Plot the ggplot object for the USA
print(gg_map_usa)
# Convert the ggplot into a 3D plot using rayshader without the legend
plot_gg(gg_map_usa, width = 5, height = 4, scale = 300, multicore = TRUE, windowsize = c(1000, 800))
# Adjust the camera settings
render_camera(fov = 70, zoom = 0.5, theta = 130, phi = 35)
# Render the snapshot without the legend
Sys.sleep(0.2)
render_snapshot(clear = TRUE)  # No keep_user_par argument
lakes_map <- map_data("lakes")
gg_map_usa <- ggplot() +
# Fill USA land with a light gray color
geom_polygon(data = usa_map, aes(x = long, y = lat, group = group),
fill = "lightgray", color = NA) +
# Add state lines using the state boundaries
geom_path(data = states_map, aes(x = long, y = lat, group = group),
color = "black", size = 0.1) +  # Draw state lines
# Fill lakes with a light blue color
geom_polygon(data = lakes_map, aes(x = long, y = lat, group = group),
fill = "lightblue", color = NA, alpha = 0.5) +  # Set lakes to be a bit transparent
# Plot log10-transformed data points, with transparency added using alpha
geom_point(data = usa_data, aes(x = Longitude, y = Latitude, color = tPCB_log10),
size = 2, alpha = 0.7, show.legend = FALSE) +  # Remove legend
scale_color_viridis_c(option = "D", name = "log10(tPCB)", direction = -1) +  # Reverse color scale
coord_map(xlim = c(long_min, long_max), ylim = c(lat_min, lat_max)) +  # Limit plot to specific latitude/longitude bounds
labs(title = "log10(tPCB) Data in the USA",
x = "Longitude", y = "Latitude") +
theme_minimal() +  # Minimal theme with clean background
theme(panel.background = element_rect(fill = "white"),  # Set the panel background to white
plot.background = element_rect(fill = "white"))
# Plot the ggplot object for the USA
print(gg_map_usa)
# Convert the ggplot into a 3D plot using rayshader without the legend
plot_gg(gg_map_usa, width = 5, height = 4, scale = 300, multicore = TRUE, windowsize = c(1000, 800))
# Adjust the camera settings
render_camera(fov = 70, zoom = 0.5, theta = 130, phi = 35)
# Render the snapshot without the legend
Sys.sleep(0.2)
render_snapshot(clear = TRUE)  # No keep_user_par argument
canada_map <- map_data("world", region = "Canada")
# Create the ggplot object for the entire USA with Canada and lakes colored
gg_map_usa <- ggplot() +
# Fill USA land with a light gray color
geom_polygon(data = usa_map, aes(x = long, y = lat, group = group),
fill = "lightgray", color = NA) +
# Add Canada outline
geom_polygon(data = canada_map, aes(x = long, y = lat, group = group),
fill = "lightgray", color = NA) +  # Fill Canada with light gray
# Add state lines using the state boundaries
geom_path(data = states_map, aes(x = long, y = lat, group = group),
color = "black", size = 0.1) +  # Draw state lines
# Fill lakes with a light blue color
geom_polygon(data = lakes_map, aes(x = long, y = lat, group = group),
fill = "lightblue", color = NA, alpha = 0.5) +  # Set lakes to be a bit transparent
# Plot log10-transformed data points, with transparency added using alpha
geom_point(data = usa_data, aes(x = Longitude, y = Latitude, color = tPCB_log10),
size = 2, alpha = 0.7, show.legend = FALSE) +  # Remove legend
scale_color_viridis_c(option = "D", name = "log10(tPCB)", direction = -1) +  # Reverse color scale
coord_map(xlim = c(long_min, long_max), ylim = c(lat_min, lat_max)) +  # Limit plot to specific latitude/longitude bounds
labs(title = "log10(tPCB) Data in the USA and Canada",
x = "Longitude", y = "Latitude") +
theme_minimal() +  # Minimal theme with clean background
theme(panel.background = element_rect(fill = "white"),  # Set the panel background to white
plot.background = element_rect(fill = "white"))
# Plot the ggplot object for the USA
print(gg_map_usa)
gg_map_usa <- ggplot() +
# Fill USA land with a light gray color
geom_polygon(data = usa_map, aes(x = long, y = lat, group = group),
fill = "lightgray", color = NA) +
# Add state lines using the state boundaries
geom_path(data = states_map, aes(x = long, y = lat, group = group),
color = "black", size = 0.1) +  # Draw state lines
# Fill lakes with a light blue color
geom_polygon(data = lakes_map, aes(x = long, y = lat, group = group),
fill = "blue", color = NA, alpha = 0.5) +  # Set lakes to be a bit transparent
# Plot log10-transformed data points, with transparency added using alpha
geom_point(data = usa_data, aes(x = Longitude, y = Latitude, color = tPCB_log10),
size = 2, alpha = 0.7, show.legend = FALSE) +  # Remove legend
scale_color_viridis_c(option = "D", name = "log10(tPCB)", direction = -1) +  # Reverse color scale
coord_map(xlim = c(long_min, long_max), ylim = c(lat_min, lat_max)) +  # Limit plot to specific latitude/longitude bounds
labs(title = "log10(tPCB) Data in the USA",
x = "Longitude", y = "Latitude") +
theme_minimal() +  # Minimal theme with clean background
theme(panel.background = element_rect(fill = "white"),  # Set the panel background to white
plot.background = element_rect(fill = "white"))
# Plot the ggplot object for the USA
print(gg_map_usa)
# Convert the ggplot into a 3D plot using rayshader without the legend
plot_gg(gg_map_usa, width = 5, height = 4, scale = 300, multicore = TRUE, windowsize = c(1000, 800))
# Adjust the camera settings
render_camera(fov = 70, zoom = 0.5, theta = 130, phi = 35)
# Render the snapshot without the legend
Sys.sleep(0.2)
render_snapshot(clear = TRUE)  # No keep_user_par argument
gg_map_usa <- ggplot() +
# Fill USA land with a light gray color
geom_polygon(data = usa_map, aes(x = long, y = lat, group = group),
fill = "lightgray", color = NA) +
# Add state lines using the state boundaries
geom_path(data = states_map, aes(x = long, y = lat, group = group),
color = "black", size = 0.1) +  # Draw state lines
# Fill lakes with a light blue color
geom_polygon(data = lakes_map, aes(x = long, y = lat, group = group),
fill = "lightblue", color = NA, alpha = 0.5) +  # Set lakes to be a bit transparent
# Plot log10-transformed data points, with transparency added using alpha
geom_point(data = usa_data, aes(x = Longitude, y = Latitude, color = tPCB_log10),
size = 2, alpha = 0.7, show.legend = FALSE) +  # Remove legend
scale_color_viridis_c(option = "D", name = "log10(tPCB)", direction = -1) +  # Reverse color scale
coord_map(xlim = c(long_min, long_max), ylim = c(lat_min, lat_max)) +  # Limit plot to specific latitude/longitude bounds
labs(title = "log10(tPCB) Data in the USA",
x = "Longitude", y = "Latitude") +
theme_minimal() +  # Minimal theme with clean background
theme(panel.background = element_rect(fill = "white"),  # Set the panel background to white
plot.background = element_rect(fill = "white"))
# Plot the ggplot object for the USA
print(gg_map_usa)
# Convert the ggplot into a 3D plot using rayshader without the legend
plot_gg(gg_map_usa, width = 5, height = 4, scale = 300, multicore = TRUE, windowsize = c(1000, 800))
# Adjust the camera settings
render_camera(fov = 70, zoom = 0.5, theta = 130, phi = 35)
# Render the snapshot without the legend
Sys.sleep(0.2)
render_snapshot(clear = TRUE)  # No keep_user_par argument
library(raster)
# Download and load the elevation data
loadzip = tempfile()
download.file("https://tylermw.com/data/dem_01.tif.zip", loadzip)
localtif = raster::raster(unzip(loadzip, "dem_01.tif"))
unlink(loadzip)
# Convert the raster to a matrix
elmat = raster_to_matrix(localtif)
# Define the latitude and longitude boundaries for the entire USA
lat_min <- 24.396308
lat_max <- 49.384358
long_min <- -125.0
long_max <- -66.93457
# Filter the tpcb.ave data for the entire USA
usa_data <- tpcb.ave %>%
filter(Latitude >= lat_min, Latitude <= lat_max,
Longitude >= long_min, Longitude <= long_max) %>%
mutate(tPCB_log10 = log10(tPCB))  # Apply log10 transformation to tPCB
# Create the ggplot object for the entire USA
gg_map_usa <- ggplot() +
# Fill USA land with a light gray color
geom_polygon(data = map_data("usa"), aes(x = long, y = lat, group = group),
fill = "lightgray", color = NA) +
# Add state lines using the state boundaries
geom_path(data = map_data("state"), aes(x = long, y = lat, group = group),
color = "black", size = 0.1) +  # Draw state lines
# Plot log10-transformed data points, with transparency added using alpha
geom_point(data = usa_data, aes(x = Longitude, y = Latitude, color = tPCB_log10),
size = 2, alpha = 0.7, show.legend = FALSE) +  # Remove legend
scale_color_viridis_c(option = "D", name = "log10(tPCB)", direction = -1) +  # Reverse color scale
coord_fixed(xlim = c(long_min, long_max), ylim = c(lat_min, lat_max)) +  # Limit plot to specific latitude/longitude bounds
labs(title = "log10(tPCB) Data in the USA",
x = "Longitude", y = "Latitude") +
theme_minimal() +  # Minimal theme with clean background
theme(panel.background = element_rect(fill = "white"),  # Set the panel background to white
plot.background = element_rect(fill = "white"))  # Set the plot background to white
# Convert the elevation matrix into a 3D plot with rayshader
elmat %>%
sphere_shade(texture = "imhof1") %>%
plot_map(gg_map_usa) # Overlay the ggplot on top of the rayshader plot
# Filter the tpcb.ave data for the entire USA
usa_data <- tpcb.ave %>%
filter(Latitude >= lat_min, Latitude <= lat_max,
Longitude >= long_min, Longitude <= long_max) %>%
mutate(tPCB_log10 = log10(tPCB))  # Apply log10 transformation to tPCB
# Create the elevation plot with texture
elmat %>%
sphere_shade(texture = "imhof1") %>%  # Apply texture to the elevation matrix
plot_map() +  # Plot the base map
theme_void()  # Optional: remove axes and labels for a cleaner look
# Overlay the ggplot on top of the rayshader plot
# Note: You need to call this after generating the rayshader plot
gg_map_usa <- ggplot() +
# Fill USA land with a light gray color
geom_polygon(data = map_data("usa"), aes(x = long, y = lat, group = group),
fill = "lightgray", color = NA) +
# Add state lines using the state boundaries
geom_path(data = map_data("state"), aes(x = long, y = lat, group = group),
color = "black", size = 0.1) +  # Draw state lines
# Plot log10-transformed data points, with transparency added using alpha
geom_point(data = usa_data, aes(x = Longitude, y = Latitude, color = tPCB_log10),
size = 2, alpha = 0.7, show.legend = FALSE) +  # Remove legend
scale_color_viridis_c(option = "D", name = "log10(tPCB)", direction = -1) +  # Reverse color scale
coord_fixed(xlim = c(long_min, long_max), ylim = c(lat_min, lat_max)) +  # Limit plot to specific latitude/longitude bounds
labs(title = "log10(tPCB) Data in the USA",
x = "Longitude", y = "Latitude") +
theme_minimal() +  # Minimal theme with clean background
theme(panel.background = element_rect(fill = "white"),  # Set the panel background to white
plot.background = element_rect(fill = "white"))  # Set the plot background to white
# Adjust the camera settings
render_camera(fov = 70, zoom = 0.5, theta = 130, phi = 35)
# Render the snapshot
Sys.sleep(0.2)
render_snapshot(clear = TRUE)  # No keep_user_par argument
# Adjust the camera settings
render_camera(fov = 70, zoom = 0.5, theta = 130, phi = 35)
# Render the snapshot without the unused argument
Sys.sleep(0.2)
render_snapshot()  # Just call render_snapshot() without clear or keep_user_par
# Download and load the elevation data
loadzip = tempfile()
download.file("https://tylermw.com/data/dem_01.tif.zip", loadzip)
localtif = raster::raster(unzip(loadzip, "dem_01.tif"))
unlink(loadzip)
# Convert the raster to a matrix
elmat = raster_to_matrix(localtif)
# Define the latitude and longitude boundaries for the entire USA
lat_min <- 24.396308
lat_max <- 49.384358
long_min <- -125.0
long_max <- -66.93457
# Filter the tpcb.ave data for the entire USA
usa_data <- tpcb.ave %>%
filter(Latitude >= lat_min, Latitude <= lat_max,
Longitude >= long_min, Longitude <= long_max) %>%
mutate(tPCB_log10 = log10(tPCB))  # Apply log10 transformation to tPCB
# Create the elevation plot with texture
elmat %>%
sphere_shade(texture = "imhof1") %>%  # Apply texture to the elevation matrix
plot_map() +  # Plot the base map
theme_void()  # Optional: remove axes and labels for a cleaner look
# Overlay the ggplot on top of the rayshader plot
# Note: You need to call this after generating the rayshader plot
gg_map_usa <- ggplot() +
# Fill USA land with a light gray color
geom_polygon(data = map_data("usa"), aes(x = long, y = lat, group = group),
fill = "lightgray", color = NA) +
# Add state lines using the state boundaries
geom_path(data = map_data("state"), aes(x = long, y = lat, group = group),
color = "black", size = 0.1) +  # Draw state lines
# Plot log10-transformed data points, with transparency added using alpha
geom_point(data = usa_data, aes(x = Longitude, y = Latitude, color = tPCB_log10),
size = 2, alpha = 0.7, show.legend = FALSE) +  # Remove legend
scale_color_viridis_c(option = "D", name = "log10(tPCB)", direction = -1) +  # Reverse color scale
coord_fixed(xlim = c(long_min, long_max), ylim = c(lat_min, lat_max)) +  # Limit plot to specific latitude/longitude bounds
labs(title = "log10(tPCB) Data in the USA",
x = "Longitude", y = "Latitude") +
theme_minimal() +  # Minimal theme with clean background
theme(panel.background = element_rect(fill = "white"),  # Set the panel background to white
plot.background = element_rect(fill = "white"))  # Set the plot background to white
# Adjust the camera settings
render_camera(fov = 70, zoom = 0.5, theta = 130, phi = 35)
# Render the snapshot without the unused argument
Sys.sleep(0.2)
render_snapshot()  # Just call render_snapshot() without clear or keep_user_par
# Define the latitude and longitude boundaries for the entire USA
lat_min <- 24.396308
lat_max <- 49.384358
long_min <- -125.0
long_max <- -66.93457
# Filter the tpcb.ave data for the entire USA
usa_data <- tpcb.ave %>%
filter(Latitude >= lat_min, Latitude <= lat_max,
Longitude >= long_min, Longitude <= long_max) %>%
mutate(tPCB_log10 = log10(tPCB))  # Apply log10 transformation to tPCB
# Get map data for the USA and states
usa_map <- map_data("usa")
states_map <- map_data("state")  # Get state boundaries
lakes_map <- map_data("lakes")
gg_map_usa <- ggplot() +
# Fill USA land with a light gray color
geom_polygon(data = usa_map, aes(x = long, y = lat, group = group),
fill = "lightgray", color = NA) +
# Add state lines using the state boundaries
geom_path(data = states_map, aes(x = long, y = lat, group = group),
color = "black", size = 0.1) +  # Draw state lines
# Fill lakes with a light blue color
geom_polygon(data = lakes_map, aes(x = long, y = lat, group = group),
fill = "lightblue", color = NA, alpha = 0.5) +  # Set lakes to be a bit transparent
# Plot log10-transformed data points, with transparency added using alpha
geom_point(data = usa_data, aes(x = Longitude, y = Latitude, color = tPCB_log10),
size = 2, alpha = 0.7, show.legend = FALSE) +  # Remove legend
scale_color_viridis_c(option = "D", name = "log10(tPCB)", direction = -1) +  # Reverse color scale
coord_map(xlim = c(long_min, long_max), ylim = c(lat_min, lat_max)) +  # Limit plot to specific latitude/longitude bounds
labs(title = "Total PCB Water Concentration USA",
x = "Longitude", y = "Latitude") +
theme_minimal() +  # Minimal theme with clean background
theme(panel.background = element_rect(fill = "white"),  # Set the panel background to white
plot.background = element_rect(fill = "white"))
# Plot the ggplot object for the USA
print(gg_map_usa)
# Convert the ggplot into a 3D plot using rayshader without the legend
plot_gg(gg_map_usa, width = 5, height = 4, scale = 300, multicore = TRUE, windowsize = c(1000, 800))
# Adjust the camera settings
render_camera(fov = 70, zoom = 0.5, theta = 130, phi = 35)
# Render the snapshot without the legend
Sys.sleep(0.2)
render_snapshot(clear = TRUE)  # No keep_user_par argument
gg_map_usa <- ggplot() +
# Fill USA land with a light gray color
geom_polygon(data = usa_map, aes(x = long, y = lat, group = group),
fill = "lightgray", color = NA) +
# Add state lines using the state boundaries
geom_path(data = states_map, aes(x = long, y = lat, group = group),
color = "black", size = 0.1) +  # Draw state lines
# Fill lakes with a light blue color
geom_polygon(data = lakes_map, aes(x = long, y = lat, group = group),
fill = "lightblue", color = NA, alpha = 0.5) +  # Set lakes to be a bit transparent
# Plot log10-transformed data points, with transparency added using alpha
geom_point(data = usa_data, aes(x = Longitude, y = Latitude, color = tPCB_log10),
size = 2, alpha = 0.7, show.legend = FALSE) +  # Remove legend
scale_color_viridis_c(option = "D", name = "log10(tPCB)", direction = -1) +  # Reverse color scale
coord_map(xlim = c(long_min, long_max), ylim = c(lat_min, lat_max)) +  # Limit plot to specific latitude/longitude bounds
theme_minimal() +  # Minimal theme with clean background
theme(panel.background = element_rect(fill = "white"),  # Set the panel background to white
plot.background = element_rect(fill = "white"))
# Plot the ggplot object for the USA
print(gg_map_usa)
# Convert the ggplot into a 3D plot using rayshader without the legend
plot_gg(gg_map_usa, width = 5, height = 4, scale = 300, multicore = TRUE, windowsize = c(1000, 800))
# Adjust the camera settings
render_camera(fov = 70, zoom = 0.5, theta = 130, phi = 35)
# Render the snapshot without the legend
Sys.sleep(0.2)
render_snapshot(clear = TRUE)  # No keep_user_par argument
gg_map_usa <- ggplot() +
# Fill USA land with a light gray color
geom_polygon(data = usa_map, aes(x = long, y = lat, group = group),
fill = "lightgray", color = NA) +
# Add state lines using the state boundaries
geom_path(data = states_map, aes(x = long, y = lat, group = group),
color = "black", size = 0.1) +  # Draw state lines
# Fill lakes with a light blue color
geom_polygon(data = lakes_map, aes(x = long, y = lat, group = group),
fill = "lightblue", color = NA, alpha = 0.5) +  # Set lakes to be a bit transparent
# Plot log10-transformed data points, with transparency added using alpha
geom_point(data = usa_data, aes(x = Longitude, y = Latitude, color = tPCB_log10),
size = 2, alpha = 0.7, show.legend = FALSE) +  # Remove legend
scale_color_viridis_c(option = "D", name = "log10(tPCB)", direction = -1) +  # Reverse color scale
coord_map(xlim = c(long_min, long_max), ylim = c(lat_min, lat_max)) +  # Limit plot to specific latitude/longitude bounds
labs(x = "Longitude", y = "Latitude") +
theme_minimal() +  # Minimal theme with clean background
theme(panel.background = element_rect(fill = "white"),  # Set the panel background to white
plot.background = element_rect(fill = "white"))
# Plot the ggplot object for the USA
print(gg_map_usa)
# Convert the ggplot into a 3D plot using rayshader without the legend
plot_gg(gg_map_usa, width = 5, height = 4, scale = 300, multicore = TRUE, windowsize = c(1000, 800))
# Adjust the camera settings
render_camera(fov = 70, zoom = 0.5, theta = 130, phi = 35)
# Render the snapshot without the legend
Sys.sleep(0.2)
render_snapshot(clear = TRUE)  # No keep_user_par argument
# Save the 3D plot as an image file
rgl::snapshot3d("Output/Maps/Global/USA_tPCB_3D_map.png")
# Save the 3D plot as an image file
rgl::snapshot3d("Output/Maps/Global/USA_tPCB_3D_map.png")
# Load a DEM for the Hudson River
# For the sake of demonstration, we can use a publicly available DEM
# You may need to adjust the URL to get the appropriate DEM for the Hudson River
loadzip = tempfile()
download.file("https://prd-tnm.s3.amazonaws.com/StagedProducts/Elevation/1/USGS_3DEP_LAS.zip", loadzip)
